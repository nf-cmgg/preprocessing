/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { meta.samplename ? "${params.outdir}/${meta.samplename}" : "${params.outdir}"},
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals("versions.yml") ? null : filename }
    ]

    // BCL convert
    withName: BCLCONVERT {
        cpus   = 18
        memory = 144.GB
        ext.args = {[
            meta.lane ? "--bcl-only-lane ${meta.lane}" : "",
            "--force",
            "--bcl-num-parallel-tiles ${task.cpus}",
            "--bcl-num-conversion-threads ${task.cpus}",
            "--bcl-num-compression-threads ${task.cpus}",
        ].join(" ").trim()}
        publishDir = [
            [
                // Gather and write InterOp files
                path: { "${params.outdir}/InterOp" },
                mode: params.publish_dir_mode,
                overwrite: true,
                pattern: "**.bin",
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Fetch RunInfo.xml
                path: { meta.lane ? "${params.outdir}/Reports/L00${meta.lane}" : "${params.outdir}/Reports/" },
                mode: params.publish_dir_mode,
                pattern: "RunInfo.xml",
                overwrite: true,
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Gather and write Reports
                path: { meta.lane ? "${params.outdir}/Reports/L00${meta.lane}" : "${params.outdir}/Reports/" },
                mode: params.publish_dir_mode,
                pattern: "Reports",
                overwrite: true,
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // Gather and write Logs
                path: { meta.lane ? "${params.outdir}/Logs/L00${meta.lane}" : "${params.outdir}/Logs/" },
                mode: params.publish_dir_mode,
                pattern: "Logs",
                overwrite: true,
                saveAs: {filename -> filename.split("/")[-1] }
            ],
            [
                // don't write the fastq's
                pattern: "**.fastq.gz",
                enabled: false
            ]
        ]
    }

    // FastP
    withName: FASTP {
        ext.args = {[
            meta.single_end && reads.size() > 5000000000                ? "--split_by_lines 400000000": "",
            !meta.single_end && reads.any{ f -> f.size() > 5000000000 } ? "--split_by_lines 400000000": "",
            params.skip_trimming    ? "--disable_adapter_trimming" : "--detect_adapter_for_pe",
            params.trim_front   > 0 ? "--trim_front1 ${params.trim_front}" : "",
            params.trim_tail    > 0 ? "--trim_tail1  ${params.trim_tail}" : "",
            params.adapter_R1       ? "--adapter_sequence ${params.adapter_R1}" : "",
            params.adapter_R2       ? "--adapter_sequence_r2 ${params.adapter_R2}" : "",
        ].join(" ").trim()}
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*.{html,json}"
            ],
        ]
    }

    // FASTQ_TO_UCRAM
    //// Samtools Import
    withName: ".*FASTQ_TO_UCRAM:SAMTOOLS_IMPORT" {
        cpus = 9
        memory = { 36.GB * task.attempt }
        // WARNING: Do NOT escape the RG tag tabs when adding a readgroup
        ext.args = {[
            meta.readgroup ? "--rg-line \"@RG\t" + meta.readgroup.findResults{ it.value?.trim() ? "$it.key:$it.value" : null }.join("\t") + "\"" : "",
            "--output-fmt cram",
            "--output-fmt-option archive"
        ].join(" ").trim()}
        publishDir = [ enabled: false ]
    }

    // FASTQ_TO_CRAM
    // Readgroup
    // Example:
    // @RG\tID:220614_A00785_0484_AH5W5GDRX2.1\tCN:CMGG\tPU:220614_A00785_0484_AH5W5GDRX2.1.GCACCACC-ATCAGTAC\tPL:ILLUMINA\tLB:CNV_LI_2022_084\tSM:I2200090
    // ID : flowcell(.lane)
    // CN : sequencing center; CMGG
    // PU : flowcell.lane.index
    // PL : platform; ILLUMINA
    // LB : library prep
    // SM : samplename


    // FASTQ_ALIGN_DNA
    withName:".*:FASTQ_ALIGN_DNA:.*" {
        publishDir = [ enabled: false ]
    }

    //// Bowtie2
    withName: BOWTIE2_ALIGN {
        ext.args = {[
            "--local",
            "--fast-local",
            meta.readgroup ? "--rg-id ${meta.readgroup.ID}": "",
            meta.readgroup ? "--rg " + meta.readgroup.findResults{ it.value?.trim() ? "$it.key:$it.value" : null }.join(" --rg ") : ""
        ].join(" ").trim()}
        ext.args2 = "--fast"
        publishDir = [
            path: { meta.samplename ? "${params.outdir}/${meta.samplename}" : "${params.outdir}"},
            mode: params.publish_dir_mode,
            pattern: "*.log"
        ]
    }

    //// BWA mem/BWA mem2
    withName: "BWAMEM.*_MEM" {
        ext.args = {[
            "-K 100000000",
            "-p",
            "-v 3",
            "-Y",
            "-c 250",
            meta.readgroup ? "-R \"@RG\\t" + meta.readgroup.findResults{ it.value?.trim() ? "$it.key:$it.value" : null }.join("\\t") + "\"" : ""
        ].join(" ").trim()}
        ext.args2 = "--fast"
    }

    //// DRAGEN
    withName: DRAGMAP_ALIGN {
        ext.args = {[
            meta.readgroup ? "--RGSM \"@RG\\t" + meta.readgroup.findResults{ it.value?.trim() ? "$it.key:$it.value" : null }.join("\\t") + "\"" : ""
        ].join(" ").trim()}
        ext.args2 = "--fast"
    }

    // -b-    : Don't lock threads to cpu cores, improves performance when scheduling multiple jobs/node
    // -sm 20 : Allow 20GB of memory for sorting threads
    // -I     : ignore IDs that don't match in the paired-end aligner
    // -hc-   : enable DRAGEN compatible mode
    // -S id  : disable indexing and duplicate marking
    // -sa    : include secondary and supplementary alignments

    //// SNAP
    withName: SNAP_ALIGN {
        ext.args = {[
            "-b-",
            "-sm 20",
            "-I",
            "-hc-",
            "-S id",
            "-sa",
            meta.readgroup ? "-R \"@RG\\t" + meta.readgroup.findResults{ it.value?.trim() ? "$it.key:$it.value" : null }.join("\\t") + "\"" : ""
        ].join(" ").trim()}
    }

    // FASTQ_ALIGN_RNA
    withName:".*FASTQ_ALIGN_RNA:.*" {
        publishDir = [ enabled: false ]
    }

    withName: STAR_ALIGN {
        ext.args = {[
            // support compressed inputs
            "--readFilesCommand gunzip -c",
            // basic 2-pass mapping, with all 1st pass junctions inserted into the genome indices on the fly
            "--twopassMode Basic",
            // output unsorted BAM
            "--outSAMtype BAM Unsorted",
            // output unmapped reads in the unsorted bam file
            "--outSAMunmapped Within",
            // output all the fields in the SAM format
            "--outSAMattributes All",
            // the minimum mapped length of two segments in a chimeric alignment
            "--chimSegmentMin 20",
            // alignment will be output only if it has no more mismatches than this value.
            "--outFilterMismatchNmax 4",
            // set the readgroup info, if available. Flag arg MUST start with 'ID' tag
            meta.readgroup ? "--outSAMattrRGline \"ID:${meta.readgroup.ID}" + meta.readgroup.findResults{ it.value?.trim() && it.key != "ID" ? "$it.key:$it.value" : null }.join(" ") + "\"" : ""
        ].join(" ").trim()}
    }


    //// Samtools sormadup
    withName: ".*FASTQ_TO_CRAM:SAMTOOLS_SORMADUP" {
        ext.prefix = {"${meta.id}.merged"}
        ext.args5 = {[
            "--json",
            "-d 2500",
            "--write-index",
            "--output-fmt cram",
            "--output-fmt-option archive"
        ].join(" ").trim()}
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*metrics*",
                saveAs: {filename -> filename.replace("metrics", "duplicate_metrics").replace(".merged","")}
            ],
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*cram*",
                saveAs: {filename -> filename.replace(".merged", "")}
            ],
        ]
    }

    //// Samtools multisort
    withName: ".*FASTQ_TO_CRAM:SAMTOOLS_SORT" {
        ext.prefix = {"${meta.id}.merged"}
        ext.args = {[
            "--write-index",
            "--output-fmt cram",
            "--output-fmt-option archive"
        ].join(" ").trim()}
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*cram*",
                saveAs: {filename -> filename.replace(".merged", "")}
            ],
        ]
    }

    //// BioBamBam Bamsormadup
    withName: ".*FASTQ_TO_CRAM:BIOBAMBAM_BAMSORMADUP" {
        ext.prefix = {"${meta.id}.merged"}
        ext.args = {[
            "indexfilename=${meta.id}.merged.bam.bai",
            "optminpixeldif=2500"
        ].join(" ").trim()}
        ext.args2 = "exclude=QCFAIL"
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*metrics*",
                saveAs: {filename -> filename.replace("metrics", "duplicate_metrics").replace(".merged","")}
            ]
        ]
    }

    //// Samtools convert
    withName: ".*FASTQ_TO_CRAM:SAMTOOLS_CONVERT" {
        label = "process_medium"
        ext.args = {[
            "-C",
            "--output-fmt cram",
            "--output-fmt-option archive"
        ].join(" ").trim()}
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*cram*",
                saveAs: {filename -> filename.replace(".merged", "")}
            ],
        ]
    }

    // coverage
    //// Mosdepth
    withName: ".*COVERAGE:MOSDEPTH" {
        cpus = 4
        memory = { 4.GB * task.attempt }
        // filter reads with flag 1804
        //     read unmapped (0x4)
        //     mate unmapped (0x8)*
        //     not primary alignment (0x100)
        //     read fails platform/vendor quality checks (0x200)
        //     read is PCR or optical duplicate (0x400)
        // filter reads with MAPQ < 1
        // quantize coverage to 4 bins
        ext.args = [
            "--flag 1804",
            "--mapq 1",
            "--quantize 0:1:4:"
        ].join(" ").trim()
    }

    //// Samtools coverage
    withName: ".*:COVERAGE:SAMTOOLS_COVERAGE" {
        ext.prefix = {"${meta.id}.coverage"}
    }

    //// CoverageQC (Multiqc)
    // withName: ".*:COVERAGE:COVERAGEQC" {
    //     ext.args   = { "--title \"Coverage ${meta.samplename ?: meta.id}\" }
    // }

    // Checksums
    withName: MD5SUM {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.samplename}" },
                mode: params.publish_dir_mode,
                pattern: "*.md5",
                saveAs: {filename -> filename.replace(".merged", "")}
            ]
        ]
    }

    // QC

    withName: ".*BAM_QC.*" {
        cpus = 1
    }

    //// Picard
    withName= ".*PICARD.*" {
        memory = { 8.GB * task.attempt }
        ext.args = "--MAX_RECORDS_IN_RAM 10000000"
    }


    // MultiQC
    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

env {
    // Add env variables for MOSDEPTH
    MOSDEPTH_Q0 = 'NO_COVERAGE'
    MOSDEPTH_Q1 = 'LOW_COVERAGE'
    MOSDEPTH_Q2 = 'CALLABLE'
}
